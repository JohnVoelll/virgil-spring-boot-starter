plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Spring Boot
    implementation "org.springframework.boot:spring-boot-actuator:3.0.0"
    implementation "org.springframework.boot:spring-boot-starter-amqp:3.0.0"
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:3.0.0"

    // Jackson libraries
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.0"

    // Spring Boot Admin
    implementation 'de.codecentric:spring-boot-admin-starter-server:3.0.0'
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.0.0'

    implementation 'io.projectreactor.netty:reactor-netty:1.0.0'

    compileOnly 'org.immutables:value:2.8.3'
    annotationProcessor 'org.immutables:value:2.8.3'

    // Test Only
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.assertj:assertj-core:3.23.0'
    testImplementation 'org.springframework:spring-test:6.0.0'
    testImplementation 'org.springframework:spring-context:6.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.0'
}

springBoot {
    buildInfo {
        excludes = ['time']
    }
}

test {
    useJUnitPlatform()
}

ext['indeed.publish.name'] = 'virgil-spring-boot-starter'

compileJava {
    // adds metadata at compile to allow for better reflection for spring boot admin
    // specifically allows actuator @Selector attributes to pick up the name of the parameter
    options.compilerArgs << '-parameters'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.indeed'
            artifactId = 'virgil-spring-boot-starter' // use the name from ext['indeed.publish.name']
            version = '1.1.4-SNAPSHOT' // use whatever version makes sense for your project

            from components.java
        }
    }
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}

task virgilTest(type: Exec) {
    workingDir './src/npm/custom/'
    commandLine 'npm', 'test'
}

task virgilNpmInstall(type: Exec) {
    workingDir './src/npm/custom/'
    commandLine 'npm', 'install'
}

task virgilNpmBuild(type: Exec) {
    workingDir './src/npm/custom/'
    commandLine 'npm', 'run', 'build'
}

task virgilNpmBuildDev(type: Exec) {
    workingDir './src/npm/custom/'
    commandLine 'npm', 'run', "build:dev"
}

task virgilCleanTarget(type: Delete) {
    delete fileTree('./src/main/resources/META-INF/extensions/custom')
}

task virgilCopyToResources(type: Copy) {
    from './src/npm/custom/target/dist'
    into './src/main/resources/META-INF/extensions/custom'
}

task buildFrontEndProd(type: GradleBuild) {
    group = 'build'
    description = 'Build frontend for Prod'

    dependsOn ordered(":virgilNpmInstall", ":virgilTest", ":virgilNpmBuild", ":virgilCleanTarget", ":virgilCopyToResources")
}

task buildFrontEndDev(type: GradleBuild) {
    group = 'build'
    description = 'Build frontend for Dev'

    dependsOn ordered(":virgilNpmInstall", ":virgilTest", ":virgilNpmBuildDev", ":virgilCleanTarget", ":virgilCopyToResources")
}

